var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AppConfig.html",[0,1.795,1,1.795]],["body/interfaces/AppConfig.html",[0,2.285,1,3.283,2,2.954,3,0.366,4,0.327,5,0.327,6,3.282,7,0.736,8,1.572,9,5.508,10,1.717,11,0.907,12,0.025,13,0.449,14,4.669,15,2.954,16,0.459,17,2.285,18,3.282,19,3.723,20,3.723,21,0.019,22,0.019]],["title/controllers/AppController.html",[23,1.356,24,2.32]],["body/controllers/AppController.html",[3,0.363,4,0.324,5,0.324,7,0.729,10,1.563,12,0.024,13,0.56,16,0.363,21,0.019,22,0.019,23,2.152,24,3.683,25,1.71,26,3.689,27,2.849,28,5.331,29,1.41,30,1.094,31,4.352,32,2.265,33,1.242,34,3.373,35,3.689,36,0.015,37,2.667,38,2.45,39,2.265,40,4.352]],["title/modules/AppModule.html",[41,1.356,42,2.32]],["body/modules/AppModule.html",[1,1.453,3,0.144,4,0.128,5,0.128,11,0.727,12,0.025,13,0.661,15,1.158,16,0.233,21,0.01,22,0.01,24,2.995,25,1.592,33,0.797,34,2.946,35,2.367,36,0.012,39,0.896,41,1.75,42,3.963,43,0.832,44,0.832,45,0.969,46,0.969,47,0.832,48,2.281,49,0.969,50,1.459,51,1.459,52,1.459,53,3.078,54,2.922,55,3.128,56,1.572,57,0.969,58,0.896,59,1.721,60,3.564,61,1.721,62,1.721,63,1.287,64,1.721,65,1.721,66,1.721,67,2.792,68,1.711,69,1.721,70,2.792,71,3.028,72,1.459,73,1.878,74,1.721,75,2.087,76,1.721,77,2.087,78,1.711,79,2.158,80,1.459,81,1.459,82,1.349,83,1.721,84,2.367,85,1.158,86,2.792,87,2.367,88,2.792,89,1.721,90,2.158,91,1.721,92,1.721,93,1.721,94,1.721,95,1.721,96,1.721,97,0.969,98,1.721,99,1.983,100,1.721,101,3.435,102,2.367,103,2.367,104,2.367,105,2.367,106,2.792,107,2.367,108,1.878,109,1.721,110,2.087,111,2.792,112,1.721,113,1.721,114,1.721,115,1.721,116,1.721,117,1.721,118,2.367,119,1.721,120,1.349,121,1.721,122,1.721,123,1.721]],["title/injectables/AppService.html",[34,1.942,124,1.356]],["body/injectables/AppService.html",[1,2.14,3,0.343,4,0.306,5,0.306,7,0.689,10,1.508,12,0.025,13,0.597,16,0.343,17,2.14,21,0.018,22,0.018,27,2.748,28,5.22,30,1.033,32,2.14,33,1.174,34,2.974,36,0.014,37,2.52,38,2.315,39,2.14,71,3.073,72,3.486,79,3.237,80,3.486,81,3.486,124,2.076,125,2.315,126,3.486,127,4.111,128,2.52,129,4.111,130,3.486,131,4.111]],["title/controllers/AuthController.html",[23,1.356,132,2.32]],["body/controllers/AuthController.html",[3,0.393,4,0.351,5,0.351,12,0.024,13,0.589,16,0.393,21,0.02,22,0.02,23,1.852,25,1.852,33,1.345,36,0.016,37,2.887,38,2.653,128,2.887,132,3.869,133,3.994,134,4.712,135,3.496,136,3.994,137,4.712]],["title/modules/AuthModule.html",[41,1.356,53,2.114]],["body/modules/AuthModule.html",[3,0.317,4,0.283,5,0.283,12,0.024,13,0.636,16,0.317,21,0.018,22,0.018,25,1.973,33,1.086,36,0.013,41,2.209,43,1.838,44,1.838,45,2.142,46,2.142,47,1.838,48,3.165,49,2.142,53,4.048,55,3.593,56,2.827,57,2.142,58,1.98,60,3.753,84,3.225,132,3.78,135,3.664,136,4.257,138,3.225,139,3.804,140,3.225,141,3.804,142,3.804]],["title/injectables/AuthService.html",[124,1.356,135,1.942]],["body/injectables/AuthService.html",[3,0.42,4,0.374,5,0.374,12,0.024,13,0.515,16,0.42,21,0.021,22,0.021,33,1.436,36,0.017,124,2.352,125,2.832,135,3.369,143,4.264]],["title/interfaces/ConfigType.html",[0,1.795,144,2.32]],["body/interfaces/ConfigType.html",[0,2.069,1,3.164,2,2.675,3,0.332,4,0.296,5,0.296,7,0.667,8,1.475,11,1.068,12,0.024,13,0.588,16,0.431,17,2.069,18,4.545,21,0.018,22,0.018,73,2.675,78,2.437,110,4.545,118,5.155,144,3.477,145,2.972,146,4.382,147,3.976,148,3.371,149,3.371,150,3.371,151,3.371,152,3.371,153,3.371,154,3.371,155,3.371,156,4.869,157,3.371,158,3.371,159,3.371,160,3.371,161,3.371]],["title/classes/CreatePostDto.html",[36,0.012,162,2.114]],["body/classes/CreatePostDto.html",[3,0.086,4,0.077,5,0.077,7,0.173,8,0.831,10,1.692,11,1.204,12,0.025,13,0.449,16,0.151,21,0.006,22,0.006,29,1.482,30,1.15,36,0.011,63,0.773,85,1.22,97,1.364,99,2.471,130,1.538,162,1.485,163,0.357,164,3.541,165,0.773,166,2.541,167,4.388,168,2.912,169,2.912,170,4.016,171,2.912,172,2.912,173,3.933,174,1.31,175,3.313,176,2.559,177,1.538,178,2.53,179,3.571,180,2.912,181,1.034,182,1.034,183,1.034,184,1.034,185,2.645,186,1.034,187,2.912,188,2.054,189,2.423,190,1.034,191,1.034,192,1.034,193,1.034,194,2.245,195,3.093,196,3.313,197,1.63,198,1.034,199,1.034,200,2.912,201,2.469,202,1.814,203,1.814,204,2.423,205,2.423,206,1.034,207,1.034,208,2.423,209,2.423,210,3.313,211,2.423,212,2.054,213,1.034,214,1.034,215,3.648,216,1.034,217,3.648,218,3.648,219,2.423,220,2.423,221,2.423,222,2.423,223,2.423,224,2.423,225,1.034,226,3.093,227,2.03,228,2.054,229,1.034,230,1.034,231,1.034,232,1.034,233,3.933,234,1.034,235,1.034,236,1.034,237,3.313,238,0.695,239,2.423,240,2.423,241,2.12,242,3.285,243,2.471,244,2.423,245,1.034,246,0.876,247,2.423,248,0.434,249,1.034,250,1.814,251,0.944,252,1.034,253,3.878,254,4.14,255,0.582,256,2.912,257,1.034,258,2.469,259,2.912,260,1.034,261,1.811,262,0.876,263,0.876,264,1.814,265,1.034,266,1.814,267,0.876,268,0.876,269,1.538,270,1.814,271,1.814,272,1.034,273,1.034,274,1.034,275,1.034,276,1.034,277,1.034,278,1.034,279,1.034,280,1.814,281,1.034,282,0.876,283,1.538,284,2.727,285,0.876,286,1.034,287,1.034,288,0.876,289,1.034,290,1.034,291,1.034,292,1.034,293,1.814,294,1.814,295,1.034,296,1.034]],["title/classes/CreatePostMetaOptionsDto.html",[36,0.012,185,2.32]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.354,4,0.315,5,0.315,7,0.71,8,1.537,10,1.537,11,1.112,12,0.024,13,0.434,16,0.354,21,0.019,22,0.019,29,1.744,30,1.353,36,0.018,163,1.463,164,4.424,178,2.859,185,3.622,227,3.627,241,3.008,243,3.032,248,1.78,284,4.424,297,3.592,298,4.237,299,4.237,300,4.237]],["title/classes/CreateTaskDto.html",[36,0.012,301,1.942]],["body/classes/CreateTaskDto.html",[3,0.324,4,0.289,5,0.289,7,0.651,8,1.452,10,1.719,11,1.172,12,0.024,13,0.521,16,0.324,21,0.018,22,0.018,29,1.838,30,1.426,36,0.017,163,1.34,174,2.554,176,3.478,194,2.231,238,2.61,241,2.91,243,3.195,248,1.63,301,2.864,302,5.107,303,2.901,304,5.087,305,3.881,306,2.953,307,3.29,308,3.881,309,3.881,310,2.378,311,2.901]],["title/classes/CreateUserDto.html",[36,0.012,312,1.942]],["body/classes/CreateUserDto.html",[3,0.304,4,0.271,5,0.271,7,0.611,8,1.393,10,1.868,11,1.214,12,0.024,13,0.373,16,0.304,21,0.017,22,0.017,29,1.904,30,1.477,36,0.017,108,3.702,163,1.259,241,2.839,242,3.284,243,3.309,246,3.092,248,1.532,283,3.092,312,2.749,313,5.195,314,3.092,315,4.114,316,4.114,317,4.114,318,3.647,319,3.647,320,3.647,321,3.647,322,3.647,323,3.647,324,3.647,325,3.647,326,4.882,327,3.647,328,3.647,329,3.647]],["title/classes/GetUsersParamDto.html",[36,0.012,330,2.114]],["body/classes/GetUsersParamDto.html",[3,0.325,4,0.29,5,0.29,7,0.653,8,1.456,11,1.175,12,0.024,13,0.582,16,0.325,21,0.018,22,0.018,29,1.262,30,0.979,36,0.019,85,2.621,120,2.464,163,1.345,166,2.654,177,3.303,179,3.126,194,1.531,242,3.431,248,1.637,254,4.324,255,2.194,330,3.126,331,4.324,332,3.431,333,3.303,334,2.631,335,3.485,336,3.813,337,5.101,338,3.896,339,3.896,340,4.324,341,3.303]],["title/interfaces/ITask.html",[0,1.795,342,2.114]],["body/interfaces/ITask.html",[0,2.095,2,2.708,3,0.336,4,0.3,5,0.3,7,0.675,8,1.487,10,1.929,11,1.262,12,0.024,16,0.435,21,0.018,22,0.018,174,2.749,176,3.744,194,2.401,261,3.009,306,3.179,334,2.567,342,3.193,343,3.009,344,3.895,345,4.417,346,4.417]],["title/classes/PatchUserDto.html",[36,0.012,347,2.32]],["body/classes/PatchUserDto.html",[3,0.397,4,0.354,5,0.354,12,0.024,13,0.592,16,0.397,21,0.02,22,0.02,36,0.016,163,1.643,251,2.476,312,2.679,347,3.892,348,4.034,349,4.034,350,3.546,351,5.787,352,3.557,353,3.557,354,3.557,355,3.557]],["title/controllers/PostsController.html",[23,1.356,356,2.32]],["body/controllers/PostsController.html",[3,0.223,4,0.199,5,0.199,7,0.449,11,0.812,12,0.025,13,0.585,16,0.223,21,0.014,22,0.014,23,1.053,25,1.053,27,2.045,29,1.273,30,0.988,32,2.045,33,0.764,36,0.009,38,1.508,128,1.641,162,3.5,166,2.045,174,1.769,178,2.851,194,2.016,251,2.423,255,1.508,258,4.349,356,2.644,357,2.271,358,3.931,359,3.5,360,3.931,361,3.931,362,2.678,363,3.931,364,3.144,365,3.931,366,5.13,367,5.13,368,2.678,369,2.678,370,2.409,371,2.409,372,2.938,373,2.678,374,3.841,375,2.938,376,4.349,377,4.656,378,3.931,379,2.678,380,2.678,381,2.002,382,3.481,383,2.622,384,2.271,385,2.678,386,2.002,387,3.332,388,3.948,389,3.948,390,2.678,391,2.678,392,2.002,393,2.271,394,2.271,395,1.641,396,4.656,397,3.332,398,2.678,399,2.678,400,2.678,401,2.678]],["title/modules/PostsModule.html",[41,1.356,54,2.114]],["body/modules/PostsModule.html",[3,0.347,4,0.31,5,0.31,12,0.024,13,0.601,16,0.347,21,0.019,22,0.019,25,2.093,33,1.189,36,0.014,41,2.307,43,2.012,44,2.012,45,2.345,46,2.345,47,2.012,48,3.305,49,2.345,54,4.008,56,2.998,57,2.345,58,2.167,356,3.949,383,3.682,384,3.53,402,3.53,403,3.53,404,4.164,405,4.164]],["title/injectables/PostsService.html",[124,1.356,383,1.942]],["body/injectables/PostsService.html",[3,0.42,4,0.374,5,0.374,12,0.024,13,0.515,16,0.42,21,0.021,22,0.021,33,1.436,36,0.017,124,2.352,125,2.832,383,3.369,406,4.264]],["title/entities/Task.html",[82,1.667,407,2.114]],["body/entities/Task.html",[3,0.268,4,0.239,5,0.239,7,0.538,8,1.278,10,1.732,11,1.286,12,0.024,13,0.458,16,0.268,21,0.016,22,0.016,29,1.805,30,1.401,36,0.011,82,2.692,90,1.968,97,3.138,99,2.52,174,2.318,176,3.591,194,2.025,261,4.166,306,3.05,334,2.164,336,2.4,407,2.743,408,2.722,409,4.368,410,4.476,411,4.725,412,3.211,413,4.476,414,3.211,415,4.166,416,3.211,417,3.794,418,3.794,419,4.476,420,3.794,421,4.476,422,3.211,423,4.725,424,2.722,425,2.16,426,3.211,427,2.722]],["title/controllers/TasksController.html",[23,1.356,428,2.32]],["body/controllers/TasksController.html",[3,0.162,4,0.144,5,0.144,7,0.326,10,1.09,11,1.04,12,0.025,13,0.54,16,0.162,17,2.462,21,0.011,22,0.011,23,0.763,25,0.763,27,1.6,29,1.63,30,1.325,32,2.744,33,0.554,36,0.007,37,1.19,38,1.094,39,2.619,82,2.843,128,1.19,166,2.619,178,1.844,251,1.987,301,2.445,310,1.19,334,0.816,342,3.45,359,3.915,364,1.885,370,3.084,371,3.084,372,2.299,375,1.452,381,3.762,382,1.452,395,2.34,428,2.069,429,1.647,430,1.647,431,2.607,432,3.246,433,2.607,434,3.075,435,3.818,436,3.818,437,1.942,438,1.942,439,3.075,440,1.942,441,4.085,442,1.942,443,1.942,444,5.468,445,1.942,446,1.942,447,2.607,448,1.942,449,3.075,450,1.942,451,1.942,452,2.92,453,3.075,454,1.942,455,1.942,456,3.351,457,3.075,458,1.942,459,1.942,460,1.942,461,1.942,462,3.818,463,3.237,464,1.732,465,1.647,466,2.299,467,1.942,468,1.942,469,1.942,470,1.942,471,1.942,472,1.942,473,1.942,474,1.942,475,1.942,476,2.607,477,1.942,478,1.942,479,3.818,480,1.942,481,1.942,482,1.942,483,1.942,484,1.942,485,1.942,486,1.942,487,1.942]],["title/modules/TasksModule.html",[41,1.356,68,2.114]],["body/modules/TasksModule.html",[3,0.347,4,0.31,5,0.31,12,0.024,13,0.601,16,0.347,21,0.019,22,0.019,25,2.093,33,1.189,36,0.014,41,2.307,43,2.012,44,2.012,45,2.345,46,2.345,47,2.012,48,3.305,49,2.345,56,2.998,57,2.345,58,2.167,68,4.008,428,3.949,464,3.682,465,3.53,488,3.53,489,3.53,490,4.164,491,4.164]],["title/injectables/TasksService.html",[124,1.356,464,1.942]],["body/injectables/TasksService.html",[3,0.186,4,0.166,5,0.166,7,0.374,8,0.979,10,1.442,11,1.102,12,0.025,13,0.546,16,0.186,17,2.172,21,0.012,22,0.012,27,1.785,30,1.396,32,2.775,33,0.637,36,0.008,39,2.629,82,2.262,124,1.348,125,1.257,166,2.629,227,1.369,251,2.172,301,3.003,306,2.89,310,1.369,334,2.123,336,2.563,342,3.843,359,3.096,364,1.369,370,3.096,371,3.096,372,1.669,375,1.669,395,3.268,415,1.669,427,1.893,430,3.539,431,2.907,432,3.501,433,2.907,456,3.512,464,1.931,466,2.563,476,1.893,492,1.893,493,4.174,494,3.429,495,3.429,496,2.233,497,2.233,498,2.233,499,2.233,500,3.429,501,2.233,502,2.233,503,4.174,504,2.233,505,3.429,506,3.429,507,3.429,508,2.233,509,2.233,510,3.429,511,2.233,512,2.307,513,2.233,514,2.233,515,2.233,516,2.233,517,3.429,518,2.233,519,3.429,520,2.233,521,3.429,522,2.233,523,2.233,524,2.233,525,2.233,526,2.233]],["title/classes/TypedConfigService.html",[36,0.012,79,2.114]],["body/classes/TypedConfigService.html",[3,0.401,4,0.357,5,0.357,12,0.024,13,0.596,15,3.232,16,0.401,21,0.02,22,0.02,36,0.016,71,4.682,79,3.567,144,3.232,163,1.659,350,3.567,527,4.074,528,4.074,529,4.805]],["title/classes/UpdateTaskDto.html",[36,0.012,456,2.114]],["body/classes/UpdateTaskDto.html",[3,0.33,4,0.295,5,0.295,10,1.471,12,0.025,13,0.621,16,0.33,21,0.018,22,0.018,36,0.018,163,1.367,174,1.782,176,2.427,194,1.556,238,2.664,241,2.933,242,4.083,243,3.227,248,1.664,251,2.061,301,2.23,303,2.96,306,2.683,310,2.427,311,2.96,350,3.159,352,2.96,353,2.96,354,2.96,456,3.159,466,2.96,530,3.357,531,5.155]],["title/entities/User.html",[120,1.667,407,2.114]],["body/entities/User.html",[3,0.256,4,0.228,5,0.228,7,0.514,8,1.237,10,1.792,11,1.319,12,0.024,13,0.314,16,0.256,21,0.015,22,0.015,29,1.867,30,1.448,36,0.01,90,1.881,97,3.368,99,3.076,108,3.381,120,2.094,315,3.758,316,3.758,317,3.758,334,2.112,335,2.657,407,2.657,409,4.631,411,5.323,417,5.323,418,5.323,420,3.675,423,4.885,424,4.262,425,2.064,532,2.602,533,5.323,534,3.069,535,3.069,536,3.069,537,3.069,538,3.069]],["title/injectables/UserService.html",[124,1.356,539,1.942]],["body/injectables/UserService.html",[3,0.21,4,0.187,5,0.187,7,0.421,10,1.28,11,0.926,12,0.025,13,0.571,16,0.21,17,1.307,21,0.013,22,0.013,27,1.95,30,1.127,32,1.95,33,0.717,36,0.009,39,2.333,78,1.539,120,1.213,124,1.473,125,1.414,166,2.333,197,1.689,312,2.995,315,3.976,316,3.717,317,3.717,330,2.748,332,1.689,334,1.575,335,3.26,355,1.877,359,3.543,370,2.748,371,2.748,386,1.877,392,2.802,393,2.129,394,2.129,395,1.539,425,1.689,432,1.877,539,2.11,540,2.129,541,4.484,542,3.177,543,3.748,544,2.512,545,4.51,546,2.512,547,3.748,548,3.177,549,2.512,550,2.512,551,3.748,552,2.512,553,2.129,554,2.129,555,2.129,556,2.512,557,2.512,558,1.877,559,1.877,560,2.512,561,2.129,562,3.748,563,4.484,564,2.512,565,2.512,566,3.748,567,2.512,568,2.512,569,3.748,570,2.512,571,2.512,572,4.484,573,2.512,574,2.512]],["title/controllers/UsersController.html",[23,1.356,575,2.32]],["body/controllers/UsersController.html",[3,0.165,4,0.147,5,0.147,7,0.331,10,0.563,11,1.096,12,0.024,13,0.563,16,0.165,17,1.027,21,0.011,22,0.011,23,0.776,25,0.776,27,1.621,29,1.25,30,0.97,32,2.008,33,0.563,36,0.007,37,1.21,38,1.754,39,2.008,87,1.673,97,2.467,99,1.754,120,2.734,128,1.21,166,2.28,174,0.888,178,1.864,179,3.106,188,4.297,194,2.277,197,3.569,255,1.111,312,2.853,330,3.251,332,3.409,334,2.31,335,3.622,341,2.641,347,3.699,355,1.475,359,3.468,364,1.909,370,2.364,371,3.106,376,2.641,381,1.475,382,2.884,386,1.475,388,2.641,389,2.641,395,1.21,397,1.673,447,1.673,463,2.641,533,3.271,539,2.467,542,2.641,548,1.673,553,1.673,554,1.673,558,1.475,559,1.475,561,4.498,575,2.095,576,1.673,577,3.858,578,3.115,579,1.974,580,1.974,581,1.974,582,3.115,583,2.641,584,3.115,585,1.974,586,3.115,587,1.974,588,3.115,589,3.115,590,1.974,591,4.381,592,1.974,593,1.974,594,1.974,595,1.974,596,1.974,597,3.858,598,1.974,599,1.974,600,1.974,601,1.974,602,3.115,603,1.673,604,3.115,605,3.858,606,1.974,607,1.974,608,1.974,609,1.974,610,1.974,611,1.974,612,1.974,613,1.974,614,1.974,615,1.974,616,1.974,617,1.974,618,1.974,619,1.673,620,1.974,621,1.974,622,1.974,623,1.974]],["title/modules/UsersModule.html",[41,1.356,55,1.942]],["body/modules/UsersModule.html",[3,0.308,4,0.274,5,0.274,12,0.024,13,0.648,16,0.308,21,0.017,22,0.017,25,2.175,33,1.053,36,0.013,41,2.32,43,2.376,44,1.782,45,2.077,46,2.077,47,1.782,48,3.324,49,2.077,55,3.562,56,2.77,57,2.077,58,1.919,60,3.677,77,3.677,78,2.26,90,2.26,120,2.376,179,2.26,288,3.127,539,3.562,555,3.127,558,2.757,575,3.723,603,3.127,624,3.127,625,3.127,626,3.688,627,3.688,628,3.688,629,3.688,630,3.688,631,3.688]],["title/classes/WrongTaskStatusException.html",[36,0.012,512,2.32]],["body/classes/WrongTaskStatusException.html",[3,0.38,4,0.339,5,0.339,12,0.024,16,0.38,21,0.02,22,0.02,30,1.145,36,0.016,82,3.088,163,1.573,174,2.535,212,4.777,350,3.453,392,4.573,512,3.79,632,4.777,633,3.863,634,4.556,635,4.556,636,4.556,637,4.556,638,4.556,639,4.556]],["title/coverage.html",[640,3.515]],["body/coverage.html",[0,2.326,1,1.943,5,0.186,6,2.791,11,0.516,12,0.024,21,0.013,22,0.013,23,2.086,24,1.681,26,2.118,34,1.407,36,0.022,47,1.207,73,1.681,75,1.868,79,1.531,82,2.159,120,1.207,124,2.086,126,2.118,132,1.681,133,2.118,135,1.407,143,2.118,144,1.681,145,2.791,162,1.531,164,2.791,165,2.791,178,1.207,185,1.681,285,2.118,297,2.118,301,1.407,302,2.118,303,2.791,312,1.407,313,2.118,314,2.118,330,1.531,331,2.118,332,1.681,333,2.118,342,1.531,343,1.868,347,1.681,348,2.118,349,2.118,356,1.681,357,2.118,364,1.531,374,1.681,383,1.407,406,2.118,407,2.288,408,2.118,428,1.681,429,2.118,441,1.681,452,1.681,456,1.531,464,1.407,492,2.118,512,1.681,527,2.118,528,2.118,530,2.118,532,2.118,539,1.407,540,2.118,575,1.681,576,2.118,619,5.888,632,2.118,633,2.118,640,1.868,641,2.118,642,2.499,643,5.933,644,6.348,645,4.47,646,4.47,647,2.118,648,2.118,649,2.499,650,2.499,651,2.118,652,4.47,653,2.118,654,2.118,655,3.734,656,3.734,657,2.118,658,2.118,659,2.499,660,2.499]],["title/dependencies.html",[44,2.004,661,2.445]],["body/dependencies.html",[12,0.025,15,2.901,21,0.019,22,0.019,33,1.231,36,0.019,44,2.083,78,2.643,85,2.901,146,3.656,248,1.812,255,2.428,353,3.224,354,3.224,425,2.901,662,5.967,663,4.313,664,4.313,665,4.313,666,4.313,667,4.313,668,4.313,669,4.313,670,4.313,671,4.313,672,4.313,673,4.313,674,4.313,675,4.313,676,4.313,677,4.313,678,4.313,679,4.313,680,4.313]],["title/miscellaneous/enumerations.html",[681,1.624,682,3.516]],["body/miscellaneous/enumerations.html",[7,0.635,12,0.024,21,0.017,22,0.017,170,4.246,178,2.419,197,3.369,226,5.059,227,4.255,228,5.059,262,4.246,263,4.246,267,5.059,268,5.059,269,5.059,306,2.606,343,2.833,344,3.744,345,4.246,346,4.246,681,2.134,682,3.213,683,5.008,684,3.79,685,3.79,686,3.79,687,3.79,688,3.79]],["title/classes/findOneParams.html",[36,0.012,441,2.32]],["body/classes/findOneParams.html",[3,0.377,4,0.336,5,0.336,7,0.757,8,1.599,10,1.599,11,0.932,12,0.024,13,0.462,16,0.377,21,0.02,22,0.02,29,1.462,30,1.135,36,0.019,163,1.558,241,2.706,243,3.154,248,1.896,334,2.559,441,3.768,653,4.75,654,3.827,689,4.514,690,4.514,691,5.602]],["title/miscellaneous/functions.html",[681,1.624,692,3.516]],["body/miscellaneous/functions.html",[7,0.88,12,0.021,21,0.021,22,0.021,47,3.141,648,4.449,681,2.955,692,4.449,693,5.248]],["title/index.html",[7,0.483,694,2.884,695,2.884]],["body/index.html",[4,0.173,12,0.023,21,0.012,22,0.012,58,2.819,63,1.738,179,2.93,194,0.914,195,1.971,282,4.92,284,1.738,344,1.738,545,1.971,559,1.738,583,1.971,640,1.738,641,2.998,696,2.325,697,2.325,698,4.279,699,3.536,700,2.325,701,2.325,702,2.325,703,2.325,704,3.536,705,4.279,706,2.325,707,4.782,708,2.325,709,5.804,710,2.325,711,5.632,712,2.325,713,2.325,714,2.325,715,3.536,716,2.325,717,3.536,718,2.325,719,4.279,720,2.325,721,3.536,722,2.325,723,2.325,724,2.325,725,2.325,726,2.325,727,4.782,728,5.418,729,3.536,730,2.325,731,2.325,732,2.325,733,2.325,734,5.418,735,3.536,736,4.782,737,2.325,738,3.536,739,2.325,740,3.536,741,5.144,742,4.782,743,2.325,744,3.536,745,2.325,746,2.325,747,2.325,748,2.325,749,4.782,750,2.325,751,2.325,752,2.325,753,2.325,754,2.325,755,3.536,756,2.325,757,2.325,758,2.325,759,2.325,760,2.325,761,3.536,762,2.325,763,2.325,764,2.325,765,3.536,766,2.325,767,2.325,768,4.054,769,3.536,770,2.325,771,2.325,772,2.325,773,2.325,774,2.325,775,2.325,776,2.325,777,2.325,778,3.536,779,2.325,780,2.325,781,2.325,782,2.325,783,4.279,784,2.325,785,2.325,786,2.325,787,2.325,788,2.325,789,2.325,790,3.536,791,2.325,792,2.325,793,2.325,794,2.325,795,2.325,796,3.536,797,2.325,798,2.325,799,2.325,800,3.536,801,3.536,802,2.325,803,2.325,804,2.325,805,2.325,806,2.325,807,2.325,808,2.325,809,2.325,810,2.325,811,1.971,812,2.325,813,2.325,814,2.325,815,2.325,816,2.325,817,2.325,818,1.971]],["title/modules.html",[43,2.272]],["body/modules.html",[12,0.02,21,0.02,22,0.02,42,3.216,43,2.31,53,2.93,54,2.93,55,2.692,68,2.93,768,5.645,819,6.658,820,6.658,821,6.658]],["title/overview.html",[822,3.986]],["body/overview.html",[2,2.435,12,0.024,21,0.017,22,0.017,25,1.423,34,3.087,41,1.423,42,4.498,43,1.749,44,1.749,45,2.038,46,2.038,47,1.749,48,2.038,49,2.038,50,3.069,51,3.069,52,3.069,53,3.939,54,3.745,55,3.543,56,2.735,57,2.038,58,1.884,68,3.591,90,2.218,125,2.038,135,3.087,138,3.069,140,3.069,163,1.25,383,3.087,402,3.069,403,3.069,464,3.087,488,3.069,489,3.069,539,3.087,624,3.069,625,3.069,822,3.069,823,5.483,824,3.619,825,3.619,826,3.619]],["title/classes/patchhPostDto.html",[36,0.012,374,2.32]],["body/classes/patchhPostDto.html",[3,0.336,4,0.3,5,0.3,7,0.675,8,1.487,11,0.832,12,0.024,13,0.591,16,0.336,21,0.018,22,0.018,29,1.304,30,1.012,36,0.018,162,2.467,163,1.39,165,3.009,178,2.517,194,1.582,201,3.413,241,2.517,248,1.691,251,2.095,253,4.417,255,2.267,334,2.658,335,3.193,340,4.417,350,3.193,352,3.009,374,3.505,387,3.413,651,4.417,827,5.21,828,5.21,829,4.026,830,4.026,831,4.026]],["title/properties.html",[8,1.184,661,2.445]],["body/properties.html",[8,1.474,12,0.024,21,0.021,22,0.021,194,2.03,811,4.378,818,4.378,832,5.164,833,5.164,834,5.164]],["title/classes/updateTaskStatusDto.html",[36,0.012,452,2.32]],["body/classes/updateTaskStatusDto.html",[3,0.366,4,0.327,5,0.327,7,0.736,8,1.572,11,0.907,12,0.024,13,0.564,16,0.366,21,0.019,22,0.019,29,1.422,30,1.104,36,0.019,82,2.66,163,1.516,174,2.707,238,2.954,241,2.66,248,1.845,306,3.131,307,3.723,310,2.691,311,3.282,452,3.704,657,4.669,658,3.723,835,4.391]],["title/miscellaneous/variables.html",[681,1.624,836,3.516]],["body/miscellaneous/variables.html",[1,2.869,6,2.736,7,0.614,9,3.103,11,0.756,12,0.025,14,4.149,18,2.736,19,3.103,20,3.103,21,0.017,22,0.017,73,3.292,75,3.659,77,2.736,97,2.061,99,3.104,101,3.103,102,4.674,103,3.103,104,3.103,105,3.103,107,3.103,108,2.462,110,3.659,145,2.736,148,3.103,149,3.103,150,3.103,151,3.103,152,3.103,153,3.103,154,3.103,155,3.103,156,4.674,157,3.103,158,3.103,159,3.103,160,3.103,161,3.103,227,3.379,415,4.122,647,3.103,681,2.061,836,3.103,837,3.661,838,3.661,839,3.661,840,3.661,841,3.661,842,3.661,843,3.661,844,3.661,845,3.661,846,3.661]],["title/routes.html",[847,3.986]],["body/routes.html",[12,0.022,21,0.022,22,0.022,847,4.625]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ConfigType.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/ITask.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TypedConfigService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/WrongTaskStatusException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/findOneParams.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/patchhPostDto.html":{},"properties.html":{},"classes/updateTaskStatusDto.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":619,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["0.0.1",{"_index":833,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1).required",{"_index":161,"title":{},"body":{"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["11.0.0",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":825,"title":{},"body":{"overview.html":{}}}],["123456",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["154464",{"_index":341,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{}}}],["154464})@isoptional()@isint()@type(undefined",{"_index":338,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.13.3",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":824,"title":{},"body":{"overview.html":{}}}],["2.1.0",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":376,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":366,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["255",{"_index":419,"title":{},"body":{"entities/Task.html":{}}}],["3",{"_index":826,"title":{},"body":{"overview.html":{}}}],["4.0.2",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":823,"title":{},"body":{"overview.html":{}}}],["50",{"_index":533,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{}}}],["50})@apiquery({name",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{}}}],["5432",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["7.8.1",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["8.16.3",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["a@gmail.com",{"_index":566,"title":{},"body":{"injectables/UserService.html":{}}}],["abortearly",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["add",{"_index":631,"title":{},"body":{"modules/UsersModule.html":{}}}],["allowing",{"_index":756,"title":{},"body":{"index.html":{}}}],["allowunknown",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["amazing",{"_index":805,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":388,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":363,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiparam",{"_index":604,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/patchhPostDto.html":{}}}],["apiproperty({description",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/patchhPostDto.html":{}}}],["apiproperty({enum",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isarray()@isstring({each",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({description",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":605,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":389,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":606,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('users",{"_index":608,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":18,"title":{},"body":{"interfaces/AppConfig.html":{},"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["app.config",{"_index":147,"title":{},"body":{"interfaces/ConfigType.html":{}}}],["app.controller",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_message_prefix",{"_index":149,"title":{},"body":{"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["appconfig",{"_index":1,"title":{"interfaces/AppConfig.html":{}},"body":{"interfaces/AppConfig.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/ConfigType.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appconfigschema",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ConfigType.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appcontroller",{"_index":24,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":728,"title":{},"body":{"index.html":{}}}],["applications",{"_index":704,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":42,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":34,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["async",{"_index":541,"title":{},"body":{"injectables/UserService.html":{}}}],["auth",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":132,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":53,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":811,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":135,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["await",{"_index":569,"title":{},"body":{"injectables/UserService.html":{}}}],["aws",{"_index":744,"title":{},"body":{"index.html":{}}}],["backers",{"_index":806,"title":{},"body":{"index.html":{}}}],["based",{"_index":583,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["blog",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["blogs",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["blogs'})@isstring()@isnotempty()@matches(/^[a",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["board",{"_index":799,"title":{},"body":{"index.html":{}}}],["body",{"_index":381,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["body.status",{"_index":481,"title":{},"body":{"controllers/TasksController.html":{}}}],["boolean",{"_index":506,"title":{},"body":{"injectables/TasksService.html":{}}}],["boolean(process.env.db_sync",{"_index":845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":821,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":819,"title":{},"body":{"modules.html":{}}}],["building",{"_index":699,"title":{},"body":{"index.html":{}}}],["channel",{"_index":771,"title":{},"body":{"index.html":{}}}],["check",{"_index":734,"title":{},"body":{"index.html":{}}}],["class",{"_index":36,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"classes/TypedConfigService.html":{},"classes/UpdateTaskDto.html":{},"classes/WrongTaskStatusException.html":{},"classes/findOneParams.html":{},"classes/patchhPostDto.html":{},"classes/updateTaskStatusDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TypedConfigService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/WrongTaskStatusException.html":{},"coverage.html":{},"dependencies.html":{},"classes/findOneParams.html":{},"classes/patchhPostDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["classes",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"classes/TypedConfigService.html":{},"classes/UpdateTaskDto.html":{},"classes/WrongTaskStatusException.html":{},"classes/findOneParams.html":{},"overview.html":{},"classes/patchhPostDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["clicks",{"_index":755,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":739,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":402,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":403,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":488,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_providers",{"_index":489,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":624,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":625,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":423,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["column({type",{"_index":409,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["come",{"_index":762,"title":{},"body":{"index.html":{}}}],["comment",{"_index":421,"title":{},"body":{"entities/Task.html":{}}}],["config.service",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["config.service.ts",{"_index":528,"title":{},"body":{"classes/TypedConfigService.html":{},"coverage.html":{}}}],["config.types",{"_index":529,"title":{},"body":{"classes/TypedConfigService.html":{}}}],["config/app.config",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["config/config.types",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["config/typed",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["configmodule",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/TypedConfigService.html":{}}}],["configservice.get('database",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('typeormconfig",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":144,"title":{"interfaces/ConfigType.html":{}},"body":{"interfaces/ConfigType.html":{},"classes/TypedConfigService.html":{},"coverage.html":{}}}],["console.log('id",{"_index":567,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(createpostdto",{"_index":399,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(patchhpostdto",{"_index":401,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":17,"title":{},"body":{"interfaces/AppConfig.html":{},"injectables/AppService.html":{},"interfaces/ConfigType.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["constructor",{"_index":392,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{},"classes/WrongTaskStatusException.html":{}}}],["constructor(private",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersrepository",{"_index":544,"title":{},"body":{"injectables/UserService.html":{}}}],["content",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["content'})@isstring()@isoptional",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":23,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":391,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tasks",{"_index":471,"title":{},"body":{"controllers/TasksController.html":{}}}],["controller('users",{"_index":607,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":777,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":640,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"classes/patchhPostDto.html":{}}}],["create(@body",{"_index":477,"title":{},"body":{"controllers/TasksController.html":{}}}],["create(createtask",{"_index":437,"title":{},"body":{"controllers/TasksController.html":{}}}],["create(createtaskdto",{"_index":495,"title":{},"body":{"injectables/TasksService.html":{}}}],["createpost",{"_index":360,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":398,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":362,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":162,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{},"classes/patchhPostDto.html":{}}}],["createpostmetaoptionsdto",{"_index":185,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["createtask",{"_index":439,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtaskdto",{"_index":301,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["createuser",{"_index":542,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":621,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":548,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["createuserdto",{"_index":312,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":571,"title":{},"body":{"injectables/UserService.html":{}}}],["crypto",{"_index":511,"title":{},"body":{"injectables/TasksService.html":{}}}],["currently",{"_index":629,"title":{},"body":{"modules/UsersModule.html":{}}}],["currentstatus",{"_index":505,"title":{},"body":{"injectables/TasksService.html":{}}}],["data",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["database",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["db_database",{"_index":158,"title":{},"body":{"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["db_host",{"_index":151,"title":{},"body":{"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["db_password",{"_index":157,"title":{},"body":{"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["db_port",{"_index":153,"title":{},"body":{"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["db_sync",{"_index":159,"title":{},"body":{"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["db_user",{"_index":155,"title":{},"body":{"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"classes/findOneParams.html":{},"classes/patchhPostDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["deeper",{"_index":773,"title":{},"body":{"index.html":{}}}],["default",{"_index":415,"title":{},"body":{"entities/Task.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":615,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(50",{"_index":613,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"classes/WrongTaskStatusException.html":{},"classes/findOneParams.html":{},"classes/patchhPostDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["delete",{"_index":459,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete(':id",{"_index":483,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete(':id')@httpcode(httpstatus.no_content",{"_index":442,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetask",{"_index":431,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["deletetask(@param",{"_index":485,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetask(id",{"_index":497,"title":{},"body":{"injectables/TasksService.html":{}}}],["deletetask(params",{"_index":440,"title":{},"body":{"controllers/TasksController.html":{}}}],["dependencies",{"_index":44,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":727,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":743,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":735,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":754,"title":{},"body":{"index.html":{}}}],["description",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/ITask.html":{},"controllers/PostsController.html":{},"entities/Task.html":{},"classes/UpdateTaskDto.html":{},"controllers/UsersController.html":{},"index.html":{},"classes/patchhPostDto.html":{},"properties.html":{}}}],["development",{"_index":712,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":785,"title":{},"body":{"index.html":{}}}],["disable",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["discord",{"_index":770,"title":{},"body":{"index.html":{}}}],["dive",{"_index":772,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":641,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":563,"title":{},"body":{"injectables/UserService.html":{}}}],["domain",{"_index":385,"title":{},"body":{"controllers/PostsController.html":{}}}],["done",{"_index":346,"title":{},"body":{"interfaces/ITask.html":{},"miscellaneous/enumerations.html":{}}}],["draft",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto'})@isstring()@minlength(4)@isnotempty",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dtos/create",{"_index":386,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":553,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/patch",{"_index":390,"title":{},"body":{"controllers/PostsController.html":{}}}],["dtos/path",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{}}}],["e.g",{"_index":610,"title":{},"body":{"controllers/UsersController.html":{}}}],["e2e",{"_index":722,"title":{},"body":{"index.html":{}}}],["each",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":700,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":733,"title":{},"body":{"index.html":{}}}],["email",{"_index":315,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["empty",{"_index":630,"title":{},"body":{"modules/UsersModule.html":{}}}],["enabled",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ensure",{"_index":731,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":789,"title":{},"body":{"index.html":{}}}],["entities",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"entities/Task.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["entity",{"_index":407,"title":{"entities/Task.html":{},"entities/User.html":{}},"body":{"entities/Task.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{},"interfaces/ITask.html":{},"entities/Task.html":{}}}],["enumerations",{"_index":682,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posttype.enum",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/WrongTaskStatusException.html":{}}}],["eslint",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["eslint/no",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["example",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["exception",{"_index":639,"title":{},"body":{"classes/WrongTaskStatusException.html":{}}}],["exception/wrong",{"_index":513,"title":{},"body":{"injectables/TasksService.html":{}}}],["existinguser",{"_index":568,"title":{},"body":{"injectables/UserService.html":{}}}],["experience",{"_index":775,"title":{},"body":{"index.html":{}}}],["export",{"_index":16,"title":{},"body":{"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ConfigType.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/ITask.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TypedConfigService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/WrongTaskStatusException.html":{},"classes/findOneParams.html":{},"classes/patchhPostDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["exports",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":350,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/TypedConfigService.html":{},"classes/UpdateTaskDto.html":{},"classes/WrongTaskStatusException.html":{},"classes/patchhPostDto.html":{}}}],["false",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/Task.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":747,"title":{},"body":{"index.html":{}}}],["featured",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":758,"title":{},"body":{"index.html":{}}}],["fetches",{"_index":582,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":749,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ConfigType.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/ITask.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TypedConfigService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/WrongTaskStatusException.html":{},"coverage.html":{},"classes/findOneParams.html":{},"classes/patchhPostDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["find",{"_index":467,"title":{},"body":{"controllers/TasksController.html":{}}}],["findall",{"_index":432,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":433,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findone(@param",{"_index":474,"title":{},"body":{"controllers/TasksController.html":{}}}],["findone(id",{"_index":500,"title":{},"body":{"injectables/TasksService.html":{}}}],["findone(params",{"_index":446,"title":{},"body":{"controllers/TasksController.html":{}}}],["findonebyidid",{"_index":543,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyidid(id",{"_index":551,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneorfail",{"_index":434,"title":{},"body":{"controllers/TasksController.html":{}}}],["findoneorfail(id",{"_index":449,"title":{},"body":{"controllers/TasksController.html":{}}}],["findoneparams",{"_index":441,"title":{"classes/findOneParams.html":{}},"body":{"controllers/TasksController.html":{},"coverage.html":{},"classes/findOneParams.html":{}}}],["firstname",{"_index":316,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["focus",{"_index":757,"title":{},"body":{"index.html":{}}}],["follow",{"_index":793,"title":{},"body":{"index.html":{}}}],["found",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{}}}],["framework",{"_index":698,"title":{},"body":{"index.html":{}}}],["full",{"_index":788,"title":{},"body":{"index.html":{}}}],["function",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":692,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":752,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":447,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["get('/:id')@apioperation({summary",{"_index":581,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":694,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":580,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":330,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["getusersparamdto.id",{"_index":618,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto})@apiquery({name",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["graph",{"_index":780,"title":{},"body":{"index.html":{}}}],["grow",{"_index":802,"title":{},"body":{"index.html":{}}}],["hands",{"_index":774,"title":{},"body":{"index.html":{}}}],["handy",{"_index":763,"title":{},"body":{"index.html":{}}}],["hello",{"_index":130,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["help",{"_index":778,"title":{},"body":{"index.html":{}}}],["here",{"_index":559,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["hhelo",{"_index":20,"title":{},"body":{"interfaces/AppConfig.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpcode",{"_index":460,"title":{},"body":{"controllers/TasksController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":484,"title":{},"body":{"controllers/TasksController.html":{}}}],["https://nestjs.com",{"_index":815,"title":{},"body":{"index.html":{}}}],["https://schema.org\",\\r\\n",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":461,"title":{},"body":{"controllers/TasksController.html":{}}}],["id",{"_index":334,"title":{},"body":{"classes/GetUsersParamDto.html":{},"interfaces/ITask.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"classes/findOneParams.html":{},"classes/patchhPostDto.html":{}}}],["identifier",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["identifiet",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":13,"title":{},"body":{"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ConfigType.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TypedConfigService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/findOneParams.html":{},"classes/patchhPostDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["importing",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["in_progress",{"_index":345,"title":{},"body":{"interfaces/ITask.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/ConfigType.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/ITask.html":{},"controllers/PostsController.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"classes/findOneParams.html":{},"miscellaneous/functions.html":{},"classes/patchhPostDto.html":{},"classes/updateTaskStatusDto.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ConfigType.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/ITask.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TypedConfigService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/WrongTaskStatusException.html":{},"classes/findOneParams.html":{},"classes/patchhPostDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["information",{"_index":737,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":760,"title":{},"body":{"index.html":{}}}],["inject",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{}}}],["injectable",{"_index":124,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/TasksService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/TasksService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":125,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/TasksService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":393,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["injectrepository",{"_index":556,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(user",{"_index":557,"title":{},"body":{"injectables/UserService.html":{}}}],["install",{"_index":751,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":710,"title":{},"body":{"index.html":{}}}],["interact",{"_index":781,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AppConfig.html":{},"interfaces/ConfigType.html":{},"interfaces/ITask.html":{}},"body":{"interfaces/AppConfig.html":{},"interfaces/ConfigType.html":{},"interfaces/ITask.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AppConfig.html":{},"interfaces/ConfigType.html":{},"interfaces/ITask.html":{},"overview.html":{}}}],["isarray",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":318,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["isenum(poststatus",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype)@isnotempty",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(taskstatus",{"_index":311,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["isint",{"_index":340,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/patchhPostDto.html":{}}}],["isiso8601",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateTaskDto.html":{},"classes/findOneParams.html":{},"classes/patchhPostDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["isnotempty()@isenum(taskstatus",{"_index":307,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["isnotempty()@isstring",{"_index":304,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["iso8601",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/UpdateTaskDto.html":{}}}],["isstring",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateTaskDto.html":{},"classes/findOneParams.html":{}}}],["isstring()@isnotempty",{"_index":298,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@isuuid",{"_index":689,"title":{},"body":{"classes/findOneParams.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(50",{"_index":320,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(6",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional",{"_index":322,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isuuid",{"_index":691,"title":{},"body":{"classes/findOneParams.html":{}}}],["isvalidstatustransition",{"_index":493,"title":{},"body":{"injectables/TasksService.html":{}}}],["isvalidstatustransition(currentstatus",{"_index":502,"title":{},"body":{"injectables/TasksService.html":{}}}],["itask",{"_index":342,"title":{"interfaces/ITask.html":{}},"body":{"interfaces/ITask.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["items",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jane",{"_index":565,"title":{},"body":{"injectables/UserService.html":{}}}],["job",{"_index":796,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":798,"title":{},"body":{"index.html":{}}}],["john",{"_index":562,"title":{},"body":{"injectables/UserService.html":{}}}],["joi",{"_index":146,"title":{},"body":{"interfaces/ConfigType.html":{},"dependencies.html":{}}}],["joi.number().default(5432",{"_index":154,"title":{},"body":{"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["joi.number().valid(0",{"_index":160,"title":{},"body":{"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["joi.object",{"_index":148,"title":{},"body":{"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default('hello",{"_index":150,"title":{},"body":{"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default('localhot",{"_index":152,"title":{},"body":{"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":156,"title":{},"body":{"interfaces/ConfigType.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":808,"title":{},"body":{"index.html":{}}}],["json",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":812,"title":{},"body":{"index.html":{}}}],["key",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"index.html":{}}}],["lastname",{"_index":317,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["learn",{"_index":766,"title":{},"body":{"index.html":{}}}],["legend",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":418,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["letters",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":818,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":801,"title":{},"body":{"index.html":{}}}],["limit",{"_index":561,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["linkedin",{"_index":795,"title":{},"body":{"index.html":{}}}],["load",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["looking",{"_index":738,"title":{},"body":{"index.html":{}}}],["loop",{"_index":791,"title":{},"body":{"index.html":{}}}],["makes",{"_index":745,"title":{},"body":{"index.html":{}}}],["managing",{"_index":759,"title":{},"body":{"index.html":{}}}],["matches",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matches(/^[a",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":22,"title":{},"body":{"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ConfigType.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/ITask.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TypedConfigService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/WrongTaskStatusException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/findOneParams.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/patchhPostDto.html":{},"properties.html":{},"classes/updateTaskStatusDto.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["mau",{"_index":741,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(256",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(50",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(512",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["message",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["messageprefix",{"_index":9,"title":{},"body":{"interfaces/AppConfig.html":{},"miscellaneous/variables.html":{}}}],["meta",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["metadata",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["metaoptions.dto",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["metaoptions.dto.ts",{"_index":297,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metaoptions.dto.ts:6",{"_index":299,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["metaoptions.dto.ts:9",{"_index":300,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["methods",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/PostsController.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["minlength",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(6",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":681,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["misused",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["mit",{"_index":800,"title":{},"body":{"index.html":{}}}],["mock",{"_index":560,"title":{},"body":{"injectables/UserService.html":{}}}],["mode",{"_index":715,"title":{},"body":{"index.html":{}}}],["module",{"_index":41,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":43,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":736,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":813,"title":{},"body":{"index.html":{}}}],["name",{"_index":371,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["need",{"_index":786,"title":{},"body":{"index.html":{}}}],["needed",{"_index":558,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["needs",{"_index":828,"title":{},"body":{"classes/patchhPostDto.html":{}}}],["nest",{"_index":705,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":817,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":15,"title":{},"body":{"interfaces/AppConfig.html":{},"modules/AppModule.html":{},"classes/TypedConfigService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":353,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UpdateTaskDto.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":753,"title":{},"body":{"index.html":{}}}],["nestjs/platform",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"classes/patchhPostDto.html":{}}}],["nestjs/typeorm",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ConfigType.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":364,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newpassword",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["newstatus",{"_index":503,"title":{},"body":{"injectables/TasksService.html":{}}}],["newuser",{"_index":572,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":697,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":462,"title":{},"body":{"controllers/TasksController.html":{}}}],["npm",{"_index":709,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":411,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["number",{"_index":335,"title":{},"body":{"classes/GetUsersParamDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"classes/patchhPostDto.html":{}}}],["number})@apiresponse({status",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{}}}],["object",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["object.assign(task",{"_index":522,"title":{},"body":{"injectables/TasksService.html":{}}}],["offer",{"_index":797,"title":{},"body":{"index.html":{}}}],["official",{"_index":742,"title":{},"body":{"index.html":{}}}],["one.params",{"_index":468,"title":{},"body":{"controllers/TasksController.html":{}}}],["one.params.ts",{"_index":654,"title":{},"body":{"coverage.html":{},"classes/findOneParams.html":{}}}],["one.params.ts:7",{"_index":690,"title":{},"body":{"classes/findOneParams.html":{}}}],["open",{"_index":344,"title":{},"body":{"interfaces/ITask.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["option",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options.dto",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["out",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":822,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":661,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":463,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["param('optional",{"_index":616,"title":{},"body":{"controllers/UsersController.html":{}}}],["param.dto",{"_index":554,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":333,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":339,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameter",{"_index":611,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameter.'})@apiparam({name",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":370,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["params",{"_index":444,"title":{},"body":{"controllers/TasksController.html":{}}}],["parseint(process.env.db_port",{"_index":841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseintpipe",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":787,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":352,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UpdateTaskDto.html":{},"classes/patchhPostDto.html":{}}}],["partialtype(createpostdto",{"_index":827,"title":{},"body":{"classes/patchhPostDto.html":{}}}],["partialtype(createtaskdto",{"_index":531,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["partialtype(createuserdto",{"_index":351,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":382,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/status",{"_index":453,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id/taskupdate",{"_index":457,"title":{},"body":{"controllers/TasksController.html":{}}}],["patchhpostdto",{"_index":374,"title":{"classes/patchhPostDto.html":{}},"body":{"controllers/PostsController.html":{},"coverage.html":{},"classes/patchhPostDto.html":{}}}],["patchuserdto",{"_index":347,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":602,"title":{},"body":{"controllers/UsersController.html":{}}}],["person\"\\r\\n",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":740,"title":{},"body":{"index.html":{}}}],["please",{"_index":769,"title":{},"body":{"index.html":{}}}],["port",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["possible",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/PostsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"classes/patchhPostDto.html":{}}}],["post'})@apiresponse({status",{"_index":365,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@patch",{"_index":379,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.controller",{"_index":405,"title":{},"body":{"modules/PostsModule.html":{}}}],["post.dto",{"_index":387,"title":{},"body":{"controllers/PostsController.html":{},"classes/patchhPostDto.html":{}}}],["post.dto.ts",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{},"classes/patchhPostDto.html":{}}}],["post.dto.ts:11",{"_index":830,"title":{},"body":{"classes/patchhPostDto.html":{}}}],["post.dto.ts:161",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:169",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:181",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:188",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:196",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:204",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:209",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:217",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:223",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:250",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["postgres",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["posts",{"_index":358,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.service",{"_index":384,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":356,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":54,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":383,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.enum",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posttype",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":128,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":424,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":413,"title":{},"body":{"entities/Task.html":{}}}],["private",{"_index":395,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["process.env.app_message_prefix",{"_index":19,"title":{},"body":{"interfaces/AppConfig.html":{},"miscellaneous/variables.html":{}}}],["process.env.db_database",{"_index":844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":717,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":696,"title":{},"body":{"index.html":{}}}],["project",{"_index":707,"title":{},"body":{"index.html":{}}}],["promises",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"interfaces/AppConfig.html":{},"interfaces/ConfigType.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/ITask.html":{},"entities/Task.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"classes/findOneParams.html":{},"classes/patchhPostDto.html":{},"properties.html":{},"classes/updateTaskStatusDto.html":{}}}],["provide",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{}}}],["providers",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/users.service",{"_index":603,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["public",{"_index":359,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":612,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":614,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":767,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["randomuuid",{"_index":510,"title":{},"body":{"injectables/TasksService.html":{}}}],["read",{"_index":809,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":726,"title":{},"body":{"index.html":{}}}],["real",{"_index":782,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["registeras",{"_index":14,"title":{},"body":{"interfaces/AppConfig.html":{},"miscellaneous/variables.html":{}}}],["repository",{"_index":545,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["request",{"_index":396,"title":{},"body":{"controllers/PostsController.html":{}}}],["required",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":748,"title":{},"body":{"index.html":{}}}],["reset",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":761,"title":{},"body":{"index.html":{}}}],["response",{"_index":367,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":21,"title":{},"body":{"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ConfigType.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/ITask.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TypedConfigService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/WrongTaskStatusException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/findOneParams.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/patchhPostDto.html":{},"properties.html":{},"classes/updateTaskStatusDto.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["retrieve",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{}}}],["return",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returned",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/PostsController.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["review",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["routes",{"_index":847,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":711,"title":{},"body":{"index.html":{}}}],["runs",{"_index":732,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":701,"title":{},"body":{"index.html":{}}}],["schedule",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["schedule''})@isenum(poststatus)@isnotempty",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scheduled",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["serialize",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":702,"title":{},"body":{"index.html":{}}}],["service",{"_index":394,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["services",{"_index":609,"title":{},"body":{"controllers/UsersController.html":{}}}],["setup",{"_index":708,"title":{},"body":{"index.html":{}}}],["shaon@gmail.com",{"_index":564,"title":{},"body":{"injectables/UserService.html":{}}}],["side",{"_index":703,"title":{},"body":{"index.html":{}}}],["sidebar",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sidebarenabled",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":750,"title":{},"body":{"index.html":{}}}],["slug",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ConfigType.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/ITask.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TypedConfigService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/WrongTaskStatusException.html":{},"classes/findOneParams.html":{},"index.html":{},"classes/patchhPostDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["spaces",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["specific",{"_index":337,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":804,"title":{},"body":{"index.html":{}}}],["src/.../app.config.ts",{"_index":837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config.types.ts",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.config.ts",{"_index":839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":693,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":683,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":684,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../task.model.ts",{"_index":685,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/app.controller.ts",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:9",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.module.ts",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.service.ts",{"_index":126,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app/app.service.ts:9",{"_index":127,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.module.ts",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/config/app.config.ts",{"_index":6,"title":{},"body":{"interfaces/AppConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/config.types.ts",{"_index":145,"title":{},"body":{"interfaces/ConfigType.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/database.config.ts",{"_index":647,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/typed",{"_index":527,"title":{},"body":{"classes/TypedConfigService.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":648,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":651,"title":{},"body":{"coverage.html":{},"classes/patchhPostDto.html":{}}}],["src/posts/dtos/poststatus.enum.ts",{"_index":687,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":686,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":688,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.controller.ts",{"_index":357,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/post.controller.ts:26",{"_index":369,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/post.controller.ts:40",{"_index":380,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":404,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":406,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/task.entity.ts",{"_index":408,"title":{},"body":{"entities/Task.html":{},"coverage.html":{}}}],["src/task.entity.ts:17",{"_index":422,"title":{},"body":{"entities/Task.html":{}}}],["src/task.entity.ts:23",{"_index":412,"title":{},"body":{"entities/Task.html":{}}}],["src/task.entity.ts:30",{"_index":416,"title":{},"body":{"entities/Task.html":{}}}],["src/task.entity.ts:7",{"_index":414,"title":{},"body":{"entities/Task.html":{}}}],["src/tasks/create",{"_index":302,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/tasks/exception/wrong",{"_index":632,"title":{},"body":{"classes/WrongTaskStatusException.html":{},"coverage.html":{}}}],["src/tasks/find",{"_index":653,"title":{},"body":{"coverage.html":{},"classes/findOneParams.html":{}}}],["src/tasks/task.model.ts",{"_index":343,"title":{},"body":{"interfaces/ITask.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/tasks/tasks.controller.ts",{"_index":429,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/tasks/tasks.controller.ts:25",{"_index":445,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:30",{"_index":448,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:39",{"_index":438,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:44",{"_index":454,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:54",{"_index":458,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:64",{"_index":443,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:69",{"_index":450,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.module.ts",{"_index":490,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service.ts",{"_index":492,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/tasks/tasks.service.ts:10",{"_index":509,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:12",{"_index":499,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:16",{"_index":501,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:20",{"_index":496,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:29",{"_index":508,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:40",{"_index":504,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:53",{"_index":498,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/udpate",{"_index":657,"title":{},"body":{"coverage.html":{},"classes/updateTaskStatusDto.html":{}}}],["src/tasks/update",{"_index":530,"title":{},"body":{"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["src/users/dtos/create",{"_index":313,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":331,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/path",{"_index":348,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts",{"_index":540,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:35",{"_index":552,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/users.service.ts:44",{"_index":549,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/users.service.ts:9",{"_index":546,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.entity",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["src/users/user.entity.ts",{"_index":532,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":535,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:20",{"_index":537,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":534,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:35",{"_index":538,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:6",{"_index":536,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:61",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":579,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:80",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":626,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":713,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":716,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":718,"title":{},"body":{"index.html":{}}}],["started",{"_index":695,"title":{"index.html":{}},"body":{}}],["starter",{"_index":706,"title":{},"body":{"index.html":{}}}],["statements",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTaskDto.html":{},"interfaces/ITask.html":{},"controllers/PostsController.html":{},"entities/Task.html":{},"classes/UpdateTaskDto.html":{},"controllers/UsersController.html":{},"classes/WrongTaskStatusException.html":{},"classes/updateTaskStatusDto.html":{}}}],["status.dto",{"_index":470,"title":{},"body":{"controllers/TasksController.html":{}}}],["status.dto.ts",{"_index":658,"title":{},"body":{"coverage.html":{},"classes/updateTaskStatusDto.html":{}}}],["status.dto.ts:7",{"_index":835,"title":{},"body":{"classes/updateTaskStatusDto.html":{}}}],["status.exception",{"_index":514,"title":{},"body":{"injectables/TasksService.html":{}}}],["status.exception.ts",{"_index":633,"title":{},"body":{"classes/WrongTaskStatusException.html":{},"coverage.html":{}}}],["status.exception.ts:1",{"_index":634,"title":{},"body":{"classes/WrongTaskStatusException.html":{}}}],["statusorder",{"_index":523,"title":{},"body":{"injectables/TasksService.html":{}}}],["statusorder.indexof(currentstatus",{"_index":526,"title":{},"body":{"injectables/TasksService.html":{}}}],["stay",{"_index":790,"title":{},"body":{"index.html":{}}}],["steps",{"_index":729,"title":{},"body":{"index.html":{}}}],["story",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":746,"title":{},"body":{"index.html":{}}}],["string",{"_index":10,"title":{},"body":{"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ITask.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"classes/findOneParams.html":{}}}],["success",{"_index":377,"title":{},"body":{"controllers/PostsController.html":{}}}],["success'})@post",{"_index":368,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{}}}],["summary",{"_index":397,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["super('wrong",{"_index":635,"title":{},"body":{"classes/WrongTaskStatusException.html":{}}}],["support",{"_index":768,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":820,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":660,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":659,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":730,"title":{},"body":{"index.html":{}}}],["task",{"_index":82,"title":{"entities/Task.html":{}},"body":{"modules/AppModule.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/WrongTaskStatusException.html":{},"coverage.html":{},"classes/updateTaskStatusDto.html":{}}}],["task.dto",{"_index":466,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts",{"_index":303,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:11",{"_index":305,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:15",{"_index":308,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:7",{"_index":309,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.entity",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["task.id",{"_index":517,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.model",{"_index":310,"title":{},"body":{"classes/CreateTaskDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["task.status",{"_index":480,"title":{},"body":{"controllers/TasksController.html":{}}}],["tasks",{"_index":430,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["tasks.controller",{"_index":491,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":465,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/task.model",{"_index":426,"title":{},"body":{"entities/Task.html":{}}}],["tasks/tasks.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["taskscontroller",{"_index":428,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["taskservice",{"_index":472,"title":{},"body":{"controllers/TasksController.html":{}}}],["tasksmodule",{"_index":68,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":464,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["taskstatus",{"_index":306,"title":{},"body":{"classes/CreateTaskDto.html":{},"interfaces/ITask.html":{},"entities/Task.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"miscellaneous/enumerations.html":{},"classes/updateTaskStatusDto.html":{}}}],["taskstatus.done",{"_index":525,"title":{},"body":{"injectables/TasksService.html":{}}}],["taskstatus.in_progress",{"_index":524,"title":{},"body":{"injectables/TasksService.html":{}}}],["taskstatus.open",{"_index":427,"title":{},"body":{"entities/Task.html":{},"injectables/TasksService.html":{}}}],["test",{"_index":721,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":724,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":723,"title":{},"body":{"index.html":{}}}],["tests",{"_index":719,"title":{},"body":{"index.html":{}}}],["text",{"_index":410,"title":{},"body":{"entities/Task.html":{}}}],["thanks",{"_index":803,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('app')?.messageprefix",{"_index":129,"title":{},"body":{"injectables/AppService.html":{}}}],["this.findoneorfail(params.id",{"_index":479,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.isvalidstatustransition(task.status",{"_index":520,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.name",{"_index":637,"title":{},"body":{"classes/WrongTaskStatusException.html":{}}}],["this.tasks",{"_index":515,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasks.find((task",{"_index":516,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasks.push(task",{"_index":518,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskservice.create(createtask",{"_index":478,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.deletetask(task.id",{"_index":486,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.findall",{"_index":473,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.findone(id",{"_index":487,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.findone(params.id",{"_index":475,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.updatetask(task",{"_index":482,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":622,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findonebyidid(userid",{"_index":620,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":573,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersrepository.findone",{"_index":570,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersrepository.save(newuser",{"_index":574,"title":{},"body":{"injectables/UserService.html":{}}}],["throw",{"_index":476,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["thrown",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["thrown'})@isoptional()@isjson",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":783,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["title",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTaskDto.html":{},"interfaces/ITask.html":{},"entities/Task.html":{},"classes/UpdateTaskDto.html":{}}}],["touch",{"_index":810,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["transition",{"_index":636,"title":{},"body":{"classes/WrongTaskStatusException.html":{}}}],["true",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/Task.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["true})@minlength(3",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":816,"title":{},"body":{"index.html":{}}}],["type",{"_index":11,"title":{},"body":{"interfaces/AppConfig.html":{},"modules/AppModule.html":{},"interfaces/ConfigType.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/ITask.html":{},"controllers/PostsController.html":{},"entities/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"classes/findOneParams.html":{},"classes/patchhPostDto.html":{},"classes/updateTaskStatusDto.html":{},"miscellaneous/variables.html":{}}}],["typedconfigservice",{"_index":79,"title":{"classes/TypedConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/TypedConfigService.html":{},"coverage.html":{}}}],["typeorm",{"_index":425,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule.forfeature([user",{"_index":628,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forrootasync",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ConfigType.html":{}}}],["types",{"_index":354,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UpdateTaskDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"index.html":{}}}],["udapte",{"_index":378,"title":{},"body":{"controllers/PostsController.html":{}}}],["udnest",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["udpate",{"_index":469,"title":{},"body":{"controllers/TasksController.html":{}}}],["udpated",{"_index":831,"title":{},"body":{"classes/patchhPostDto.html":{}}}],["udpated'})@isint()@isnotempty",{"_index":829,"title":{},"body":{"classes/patchhPostDto.html":{}}}],["undefined",{"_index":336,"title":{},"body":{"classes/GetUsersParamDto.html":{},"entities/Task.html":{},"injectables/TasksService.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":420,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["unit",{"_index":720,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":550,"title":{},"body":{"injectables/UserService.html":{}}}],["unlicensed",{"_index":834,"title":{},"body":{"properties.html":{}}}],["update",{"_index":375,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatedtask",{"_index":521,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatepost",{"_index":361,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":400,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchhpostdto",{"_index":373,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":792,"title":{},"body":{"index.html":{}}}],["updatetask",{"_index":494,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetask(task",{"_index":507,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetaskdto",{"_index":456,"title":{"classes/UpdateTaskDto.html":{}},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["updatetaskdto.status",{"_index":519,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetaskstatus",{"_index":435,"title":{},"body":{"controllers/TasksController.html":{}}}],["updatetaskstatus(params",{"_index":451,"title":{},"body":{"controllers/TasksController.html":{}}}],["updatetaskstatusdto",{"_index":452,"title":{"classes/updateTaskStatusDto.html":{}},"body":{"controllers/TasksController.html":{},"coverage.html":{},"classes/updateTaskStatusDto.html":{}}}],["updateuser",{"_index":578,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(@body",{"_index":623,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(patchuserdto",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatewholetask",{"_index":436,"title":{},"body":{"controllers/TasksController.html":{}}}],["updatewholetask(params",{"_index":455,"title":{},"body":{"controllers/TasksController.html":{}}}],["url",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["useexisting",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":120,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"classes/GetUsersParamDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user.dto",{"_index":355,"title":{},"body":{"classes/PatchUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":314,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":321,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":323,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":319,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":325,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":555,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["userid",{"_index":617,"title":{},"body":{"controllers/UsersController.html":{}}}],["username",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":332,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["users.controller",{"_index":627,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.dto.ts",{"_index":349,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["users/users.module",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":575,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":539,"title":{"injectables/UserService.html":{}},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":55,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":547,"title":{},"body":{"injectables/UserService.html":{}}}],["uses",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["using",{"_index":784,"title":{},"body":{"index.html":{}}}],["valid",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationoptions",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["validationschema",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/UpdateTaskDto.html":{},"dependencies.html":{},"classes/findOneParams.html":{},"classes/patchhPostDto.html":{},"classes/updateTaskStatusDto.html":{}}}],["value",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":417,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["variable",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":836,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":832,"title":{},"body":{"properties.html":{}}}],["video",{"_index":776,"title":{},"body":{"index.html":{}}}],["visit",{"_index":765,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":779,"title":{},"body":{"index.html":{}}}],["void",{"_index":372,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["want",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/UsersModule.html":{}}}],["watch",{"_index":714,"title":{},"body":{"index.html":{}}}],["website",{"_index":814,"title":{},"body":{"index.html":{}}}],["without",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":764,"title":{},"body":{"index.html":{}}}],["world",{"_index":131,"title":{},"body":{"injectables/AppService.html":{}}}],["wrong",{"_index":638,"title":{},"body":{"classes/WrongTaskStatusException.html":{}}}],["wrongtaskstatusexception",{"_index":512,"title":{"classes/WrongTaskStatusException.html":{}},"body":{"injectables/TasksService.html":{},"classes/WrongTaskStatusException.html":{},"coverage.html":{}}}],["x",{"_index":794,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":807,"title":{},"body":{"index.html":{}}}],["you're",{"_index":725,"title":{},"body":{"index.html":{}}}],["z0",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["zoom",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AppConfig.html":{"url":"interfaces/AppConfig.html","title":"interface - AppConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AppConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/app.config.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            messagePrefix\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        messagePrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        messagePrefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nexport interface AppConfig {\n  messagePrefix: string;\n}\n\nexport const appConfig = registerAs(\n  'app',\n  (): AppConfig => ({\n    messagePrefix: process.env.APP_MESSAGE_PREFIX ?? 'hHELO',\n  }),\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // /* eslint-disable @typescript-eslint/no-misused-promises */\n// import { Module } from '@nestjs/common';\n// import { AppController } from './app.controller';\n// import { AppService } from './app.service';\n// import { TasksModule } from '../tasks/tasks.module';\n// import { ConfigModule, ConfigService } from '@nestjs/config';\n// import { appConfig } from '../config/app.config';\n// import { appConfigSchema } from '../config/config.types';\n// import { typeOrmConfig } from '../config/database.config';\n// import { TypeOrmModule } from '@nestjs/typeorm';\n// import { TypedConfigService } from '../config/typed-config.service';\n// import { Task } from '../task.entity';\n// import { UsersModule } from 'src/users/users.module';\n// import { Type } from 'class-transformer';\n\n// @Module({\n//   // imports ------------------------\n//   imports: [\n//     // TypeOrmModule.forRootAsync({\n//     //   imports: [ConfigModule],\n//     //   inject: [ConfigService],\n//     //   useFactory: (configService: TypedConfigService) => ({\n//     //     ...configService.get('database'),\n//     //     entities: [Task],\n//     //     // return configService.get('typeOrmConfig');\n//     //   }),\n//     // }),\n//     // ConfigModule.forRoot({\n//     //   load: [appConfig, typeOrmConfig],\n//     //   validationSchema: appConfigSchema,\n//     //   validationOptions: {\n//     //     // allowUnknown: false,\n//     //     abortEarly: true,\n//     //   },\n//     // }),\n//     TypeOrmModule.forRoot({\n//       type: 'postgres',\n//       entities: [],\n//       synchronize: true,\n//       port: 5432,\n//       host: 'localhost',\n//       username: 'postgres',\n//       password: '123456',\n//       database: 'udnest',\n//     }),\n//     TasksModule,\n//     UsersModule, // Importing UsersModule\n//   ],\n\n//   // controllers ------------------------\n//   controllers: [AppController],\n\n//   // provides-------------------------\n//   providers: [\n//     AppService,\n//     {\n//       provide: TypedConfigService,\n//       useExisting: ConfigService,\n//     },\n//   ],\n// })\n// export class AppModule {}\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n// import { AuthModule } from './auth/auth.module';\nimport { Module } from '@nestjs/common';\nimport { PostsModule } from '../posts/posts.module';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { User } from 'src/users/user.entity';\n// import { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    TypeOrmModule.forRootAsync({\n      imports: [],\n      inject: [],\n      useFactory: (): TypeOrmModuleOptions => ({\n        type: 'postgres',\n        entities: [User],\n        synchronize: true,\n        port: 5432,\n        username: 'postgres',\n        password: 'newPassword',\n        host: 'localhost',\n        database: 'udnest',\n      }),\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n// import { AppConfig } from '../config/app.config';\n// import { TypedConfigService } from '../config/typed-config.service';\n\n@Injectable()\nexport class AppService {\n  // constructor(private readonly configService: TypedConfigService) {}\n\n  getHello(): string {\n    // const prefix = this.configService.get('app')?.messagePrefix;\n    return `Hello World!`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\n// import { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthService } from './providers/auth.service';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [UsersModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AuthService {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigType.html":{"url":"interfaces/ConfigType.html","title":"interface - ConfigType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConfigType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            app\n                                        \n                                \n                                \n                                        \n                                            database\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        app\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        app:         AppConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AppConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        database\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        database:     TypeOrmModuleOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TypeOrmModuleOptions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as Joi from 'joi';\nimport { AppConfig } from './app.config';\nimport { TypeOrmModuleOptions } from '@nestjs/typeorm';\n\nexport interface ConfigType {\n  app: AppConfig;\n  database: TypeOrmModuleOptions;\n}\n\nexport const appConfigSchema = Joi.object({\n  APP_MESSAGE_PREFIX: Joi.string().default('Hello'),\n  DB_HOST: Joi.string().default('localhot'),\n  DB_PORT: Joi.number().default(5432),\n  DB_USER: Joi.string().required(),\n  DB_PASSWORD: Joi.string().required(),\n  DB_DATABASE: Joi.string().required(),\n  DB_SYNC: Joi.number().valid(0, 1).required(),\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'This is any valid content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:196\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:209\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:250\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Possible values ,'hello' 'post', 'page' '})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:169\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Must be a valid timestamp in ISO8601', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:217\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:204\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example - 'my url'', example: 'my-blogs'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:181\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Possible value 'draft', 'schedule''})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:188\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:223\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Title is Post dto'})@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:161\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { postType } from '../enums/postType.enum';\nimport { postStatus } from './postStatus.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-metaOptions.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n// import { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\n// import { Type } from 'class-transformer';\n// import { postStatus } from './postStatus.enum';\n\n// export class CreatePostDto {\n//   @ApiProperty({\n//     example: 'This is a title',\n//     description: 'This is the title for the blog post',\n//   })\n//   @IsString()\n//   @MinLength(4)\n//   @MaxLength(512)\n//   @IsNotEmpty()\n//   title: string;\n\n//   @ApiProperty({\n//     enum: postType,\n//     description: \"Possible values, 'post', 'page', 'story', 'series'\",\n//   })\n//   @IsEnum(postType)\n//   @IsNotEmpty()\n//   postType: postType;\n\n//   @ApiProperty({\n//     description: \"For Example - 'my-url'\",\n//     example: 'my-blog-post',\n//   })\n//   @IsString()\n//   @IsNotEmpty()\n//   @MaxLength(256)\n//   @MinLength(4)\n//   @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n//     message:\n//       'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n//   })\n//   slug: string;\n\n//   @ApiProperty({\n//     enum: postStatus,\n//     description: \"Possible values 'draft', 'scheduled', 'review', 'published'\",\n//   })\n//   @IsEnum(postStatus)\n//   @IsNotEmpty()\n//   status: postStatus;\n\n//   @ApiPropertyOptional({\n//     description: 'This is the content of the post',\n//     example: 'The post content',\n//   })\n//   @IsString()\n//   @IsOptional()\n//   content?: string;\n\n//   @ApiPropertyOptional({\n//     description:\n//       'Serialize your JSON object else a validation error will be thrown',\n//     example:\n//       '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }',\n//   })\n//   @IsOptional()\n//   @IsJSON()\n//   schema?: string;\n\n//   @ApiPropertyOptional({\n//     description: 'Featured image for your blog post',\n//     example: 'http://localhost.com/images/image1.jpg',\n//   })\n//   @IsOptional()\n//   @MinLength(4)\n//   @MaxLength(1024)\n//   @IsUrl()\n//   featuredImageUrl?: string;\n\n//   @ApiPropertyOptional({\n//     description: 'The date on which the blog post is published',\n//     example: '2024-03-16T07:46:32+0000',\n//   })\n//   @IsISO8601()\n//   @IsOptional()\n//   publishOn?: Date;\n\n//   @ApiPropertyOptional({\n//     description: 'Array of tags passed as string values',\n//     example: ['nestjs', 'typescript'],\n//   })\n//   @IsOptional()\n//   @IsArray()\n//   @IsString({ each: true })\n//   @MinLength(3, { each: true })\n//   tags?: string[];\n\n//   @ApiPropertyOptional({\n//     type: 'array',\n//     required: false,\n//     items: {\n//       type: 'object',\n//       properties: {\n//         key: {\n//           type: 'string',\n//           description:\n//             'The key can be any string identifier for your meta option',\n//           example: 'sidebarEnabled',\n//         },\n//         value: {\n//           type: 'any',\n//           description: 'Any value that you want to save to the key',\n//           example: true,\n//         },\n//       },\n//     },\n//   })\n//   @IsOptional()\n//   @IsArray()\n//   @ValidateNested({ each: true })\n//   @Type(() => CreatePostMetaOptionsDto)\n//   metaOptions?: CreatePostMetaOptionsDto[];\n// }\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'Title is Post dto',\n  })\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: postType,\n    description: \"Possible values ,'hello' 'post', 'page' \",\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    description: \"For example - 'my url'\",\n    example: 'my-blogs',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    description: \"Possible value 'draft', 'schedule'\",\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'This is any valid content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'Must be a valid timestamp in ISO8601',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'The key can be any string identifiet for your meta data',\n          example: 'sidebar enabled',\n        },\n        value: {\n          type: 'string',\n          description:\n            'The key can be any string identifiet for your meta data',\n          example: true,\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-metaOptions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-metaOptions.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-metaOptions.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/create-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/create-task.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(TaskStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/create-task.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/create-task.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsString } from 'class-validator';\nimport { TaskStatus } from './task.model';\n\nexport class CreateTaskDto {\n  @IsNotEmpty()\n  @IsString()\n  title: string;\n\n  @IsNotEmpty()\n  @IsString()\n  description: string;\n\n  @IsNotEmpty()\n  @IsEnum(TaskStatus)\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(50)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  lastName: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get User with a specific ID', example: 154464})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get User with a specific ID',\n    example: 154464,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITask.html":{"url":"interfaces/ITask.html","title":"interface - ITask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         TaskStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TaskStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ITask {\n  id: string;\n  title: string;\n  description: string;\n  status: TaskStatus;\n}\n\nexport enum TaskStatus {\n  OPEN = 'OPEN',\n  IN_PROGRESS = 'IN_PROGRESS',\n  DONE = 'DONE',\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/path-users.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new blog post'})@ApiResponse({status: 201, description: 'You have get 201 response so this is success'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/post.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchhPostDto: patchhPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a new blog post'})@ApiResponse({status: 200, description: 'You have get 200 response so this is success udapte post'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/post.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchhPostDto\n                                            \n                                                            patchhPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { create } from 'domain';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { patchhPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(\n    /*\n     *  Injecting Posts Service\n     */\n    private readonly postsService: PostsService,\n  ) {}\n\n  // post request-----------------------------------\n  @ApiOperation({\n    summary: 'Create a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You have get 201 response so this is success',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log(createPostDto);\n  }\n\n  // Patch request-----------------------------------\n  // post request-----------------------------------\n  @ApiOperation({\n    summary: 'Update a new blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'You have get 200 response so this is success udapte post',\n  })\n  @Patch()\n  public updatePost(@Body() patchhPostDto: patchhPostDto) {\n    console.log(patchhPostDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPostsService\n\nPostsService\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './post.controller';\nimport { PostsService } from './posts.service';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class PostsService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Task.html":{"url":"entities/Task.html","title":"entity - Task","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: TaskStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, nullable: false, comment: 'The title of the task', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/task.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { TaskStatus } from './tasks/task.model';\n\n@Entity()\nexport class Task {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    unique: true,\n    nullable: false,\n    comment: 'The title of the task',\n    default: '',\n  })\n  title: string;\n\n  @Column({\n    type: 'text',\n    nullable: false,\n  })\n  description: string;\n\n  @Column({\n    type: 'enum',\n    enum: TaskStatus,\n    default: TaskStatus.OPEN,\n  })\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    \n                                    Public\n                                deleteTask\n                            \n                            \n                                    \n                                    Public\n                                findAll\n                            \n                            \n                                    \n                                    Public\n                                findOne\n                            \n                            \n                                    Private\n                                findOneOrFail\n                            \n                            \n                                    \n                                    Public\n                                updateTaskStatus\n                            \n                            \n                                    \n                                    Public\n                                updateWholeTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTask: CreateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTask\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        deleteTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTask(params: findOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            findOneParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ITask[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(params: findOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            findOneParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ITask\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        findOneOrFail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneOrFail(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updateTaskStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTaskStatus(params: findOneParams, body: updateTaskStatusDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            findOneParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            updateTaskStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ITask\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updateWholeTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWholeTask(params: findOneParams, updateTaskDto: UpdateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/taskUpdate')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            findOneParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ITask\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { ITask } from './task.model';\nimport { CreateTaskDto } from './create-task.dto';\nimport { findOneParams } from './find-one.params';\nimport { updateTaskStatusDto } from './udpate-task-status.dto';\nimport { UpdateTaskDto } from './update-task.dto';\n\n@Controller('tasks')\nexport class TasksController {\n  constructor(private readonly taskService: TasksService) {}\n\n  @Get()\n  public findAll(): ITask[] {\n    return this.taskService.findAll();\n  }\n\n  @Get('/:id')\n  public findOne(@Param() params: findOneParams): ITask {\n    const task = this.taskService.findOne(params.id);\n    if (task) {\n      return task;\n    }\n    throw new NotFoundException();\n  }\n\n  @Post()\n  public create(@Body() createTask: CreateTaskDto) {\n    return this.taskService.create(createTask);\n  }\n\n  @Patch(':id/status')\n  public updateTaskStatus(\n    @Param() params: findOneParams,\n    @Body() body: updateTaskStatusDto,\n  ): ITask {\n    const task = this.findOneOrFail(params.id);\n    task.status = body.status;\n    return task;\n  }\n\n  @Patch(':id/taskUpdate')\n  public updateWholeTask(\n    @Param() params: findOneParams,\n    @Body() updateTaskDto: UpdateTaskDto,\n  ): ITask {\n    const task = this.findOneOrFail(params.id);\n    return this.taskService.updateTask(task, updateTaskDto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  public deleteTask(@Param() params: findOneParams): void {\n    const task = this.findOneOrFail(params.id);\n    this.taskService.deleteTask(task.id);\n  }\n\n  private findOneOrFail(id: string) {\n    const task = this.taskService.findOne(id);\n    if (!task) {\n      throw new NotFoundException();\n    } else {\n      return task;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\n\n@Module({\n  controllers: [TasksController],\n  providers: [TasksService]\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                tasks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Public\n                                deleteTask\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Private\n                                isValidStatusTransition\n                            \n                            \n                                    Public\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createTaskDto: CreateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ITask\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        deleteTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTask(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ITask[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ITask | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isValidStatusTransition\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidStatusTransition(currentStatus: TaskStatus, newStatus: TaskStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentStatus\n                                            \n                                                            TaskStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newStatus\n                                            \n                                                            TaskStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTask(task: ITask, updateTaskDto: UpdateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            ITask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ITask[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/tasks/tasks.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ITask, TaskStatus } from './task.model';\nimport { CreateTaskDto } from './create-task.dto';\nimport { randomUUID } from 'crypto';\nimport { UpdateTaskDto } from './update-task.dto';\nimport { WrongTaskStatusException } from './exception/wrong-task-status.exception';\n\n@Injectable()\nexport class TasksService {\n  private tasks: ITask[] = [];\n\n  findAll(): ITask[] {\n    return this.tasks;\n  }\n\n  findOne(id: string): ITask | undefined {\n    return this.tasks.find((task) => task.id === id);\n  }\n\n  create(createTaskDto: CreateTaskDto): ITask {\n    const task: ITask = {\n      id: randomUUID(),\n      ...createTaskDto,\n    };\n    this.tasks.push(task);\n    return task;\n  }\n\n  public updateTask(task: ITask, updateTaskDto: UpdateTaskDto) {\n    if (\n      updateTaskDto.status &&\n      !this.isValidStatusTransition(task.status, updateTaskDto.status)\n    ) {\n      throw new WrongTaskStatusException();\n    }\n    const updatedTask = Object.assign(task, updateTaskDto);\n    return updatedTask;\n  }\n\n  private isValidStatusTransition(\n    currentStatus: TaskStatus,\n    newStatus: TaskStatus,\n  ): boolean {\n    const statusOrder = [\n      TaskStatus.OPEN,\n      TaskStatus.IN_PROGRESS,\n      TaskStatus.DONE,\n    ];\n\n    return statusOrder.indexOf(currentStatus)  task.id !== id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypedConfigService.html":{"url":"classes/TypedConfigService.html","title":"class - TypedConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypedConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/typed-config.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConfigService\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { ConfigType } from './config.types';\n\nexport class TypedConfigService extends ConfigService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskDto.html":{"url":"classes/UpdateTaskDto.html","title":"class - UpdateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/update-task.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateTaskDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { TaskStatus } from './task.model';\nimport { PartialType } from '@nestjs/mapped-types';\nimport { CreateTaskDto } from './create-task.dto';\n\nexport class UpdateTaskDto extends PartialType(CreateTaskDto){\n  // @IsNotEmpty()\n  // @IsString()\n  // @IsOptional()\n  // title?: string;\n\n  // @IsNotEmpty()\n  // @IsString()\n  // @IsOptional()\n  // description?: string;\n\n  // @IsNotEmpty()\n  // @IsOptional()\n  // @IsEnum(TaskStatus)\n  // status?: TaskStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 50,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 50,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 50,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 50,\n    nullable: false,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createuser\n                            \n                            \n                                    Public\n                                findOneByIdid\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createuser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createuser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneByIdid\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByIdid(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { firstName: string; lastName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n// import { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {\n    //injecting repository is not needed here as this is a mock service\n  }\n  // public findAll(\n  //   getUsersParamDto: GetUsersParamDto,\n  //   limit: number,\n  //   page: number,\n  // ) {\n  //   return [\n  //     {\n  //       firstName: 'John',\n  //       lastName: 'Doe',\n  //       email: 'shaon@gmail.com',\n  //     },\n  //     {\n  //       firstName: 'Jane',\n  //       lastName: 'Doe',\n  //       email: 'a@gmail.com',\n  //     },\n  //   ];\n  // }\n\n  public findOneByIdid(id: number) {\n    console.log('id', id);\n    return {\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'a@gmail.com',\n    };\n  }\n\n  public async createuser(createUserDto: CreateUserDto) {\n    const existingUser = await this.usersRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n    let newUser = this.usersRepository.create(createUserDto);\n    newUser = await this.usersRepository.save(newUser);\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({summary: 'Get a user by ID', description: 'Fetches a user based on the provided ID parameter.'})@ApiParam({name: 'id', required: true, description: 'The ID of the user to retrieve', example: 154464, type: Number})@ApiResponse({status: 200, description: 'User found successfully.', type: GetUsersParamDto})@ApiQuery({name: 'limit', required: false, description: 'Limit the number of users returned', example: 50})@ApiQuery({name: 'page', required: false, description: 'page the number of users returned', example: 50})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  DefaultValuePipe,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { get } from 'http';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/path-users.dto';\nimport path from 'path';\nimport { UserService } from './providers/users.service';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly userService: UserService) {}\n  // You can inject services here if needed, e.g., private readonly userService: User\n\n  @Get('/:id')\n  @ApiOperation({\n    summary: 'Get a user by ID',\n    description: 'Fetches a user based on the provided ID parameter.',\n  })\n  @ApiParam({\n    name: 'id',\n    required: true,\n    description: 'The ID of the user to retrieve',\n    example: 154464,\n    type: Number,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User found successfully.',\n    type: GetUsersParamDto,\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    description: 'Limit the number of users returned',\n    example: 50,\n  })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    description: 'page the number of users returned',\n    example: 50,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(50), ParseIntPipe)\n    limit: number,\n    @Query('page', new DefaultValuePipe(10), ParseIntPipe)\n    page: number,\n\n    // @Param('optional') optional?: string,\n  ) {\n    const userId = getUsersParamDto.id ?? 0;\n    return this.userService.findOneByIdid(userId);\n  }\n\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createuser(createUserDto);\n  }\n\n  @Patch()\n  public updateUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/users.service';\nimport { User } from './user.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UserService],\n  imports: [TypeOrmModule.forFeature([User])],\n})\nexport class UsersModule {\n  // This module is currently empty, but you can add providers, controllers, and imports as needed.\n  // For example, you might want to import TypeOrmModule for user entities or other modules.\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WrongTaskStatusException.html":{"url":"classes/WrongTaskStatusException.html","title":"class - WrongTaskStatusException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WrongTaskStatusException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/exception/wrong-task-status.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/tasks/exception/wrong-task-status.exception.ts:1\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class WrongTaskStatusException extends Error {\n  constructor() {\n    super('Wrong task status transition');\n    this.name = 'wrong task status exception';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/app.config.ts\n            \n            interface\n            AppConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/config/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/config.types.ts\n            \n            interface\n            ConfigType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/config/config.types.ts\n            \n            variable\n            appConfigSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            typeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/typed-config.service.ts\n            \n            class\n            TypedConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-metaOptions.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            patchhPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task.entity.ts\n            \n            entity\n            Task\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/exception/wrong-task-status.exception.ts\n            \n            class\n            WrongTaskStatusException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tasks/find-one.params.ts\n            \n            class\n            findOneParams\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tasks/task.model.ts\n            \n            interface\n            ITask\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/tasks/udpate-task-status.dto.ts\n            \n            class\n            updateTaskStatusDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tasks/update-task.dto.ts\n            \n            class\n            UpdateTaskDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/path-users.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            pg : ^8.16.3\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.25\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                        \n                            TaskStatus   (src/.../task.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/dtos/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n    src/tasks/task.model.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                Value : OPEN\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : DONE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/findOneParams.html":{"url":"classes/findOneParams.html","title":"class - findOneParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  findOneParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/find-one.params.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/find-one.params.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsUUID } from \"class-validator\";\n\nexport class findOneParams{\n    @IsString()\n    @IsNotEmpty()\n    @IsUUID()\n    id: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/patchhPostDto.html":{"url":"classes/patchhPostDto.html","title":"class - patchhPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  patchhPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the post that needs to be udpated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class patchhPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The id of the post that needs to be udpated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/updateTaskStatusDto.html":{"url":"classes/updateTaskStatusDto.html","title":"class - updateTaskStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  updateTaskStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/udpate-task-status.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(TaskStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/udpate-task-status.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty } from 'class-validator';\nimport { TaskStatus } from './task.model';\n\nexport class updateTaskStatusDto {\n  @IsNotEmpty()\n  @IsEnum(TaskStatus)\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            appConfigSchema   (src/.../config.types.ts)\n                        \n                        \n                            typeOrmConfig   (src/.../database.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\n  'app',\n  (): AppConfig => ({\n    messagePrefix: process.env.APP_MESSAGE_PREFIX ?? 'hHELO',\n  }),\n)\n                    \n                \n\n\n        \n    \n\n    src/config/config.types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfigSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n  APP_MESSAGE_PREFIX: Joi.string().default('Hello'),\n  DB_HOST: Joi.string().default('localhot'),\n  DB_PORT: Joi.number().default(5432),\n  DB_USER: Joi.string().required(),\n  DB_PASSWORD: Joi.string().required(),\n  DB_DATABASE: Joi.string().required(),\n  DB_SYNC: Joi.number().valid(0, 1).required(),\n})\n                    \n                \n\n\n        \n    \n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        typeOrmConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\n  'database',\n  (): TypeOrmModule => ({\n    type: 'postgres',\n    host: process.env.DB_HOST,\n    port: parseInt(process.env.DB_PORT ?? '5432'),\n    username: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_DATABASE,\n    synchronize: Boolean(process.env.DB_SYNC ?? false),\n    // synchronize: true,\n\n    // autoLoadEntities: true,\n    // synchronize: true,\n  }),\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
